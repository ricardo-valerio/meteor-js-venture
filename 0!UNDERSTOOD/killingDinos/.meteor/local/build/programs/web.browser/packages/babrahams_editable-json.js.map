)]}'
{"version":3,"sources":["babrahams:editable-json/editable-json-common.js","babrahams:editable-json/editable-json.html","babrahams:editable-json/editable-json-client.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,gB;AACA,E;AACA,kD;AACA,I;AACA,0D;AACA,oB;AACA,I;AACA,S;AACA,I;AACA,4I;AACA,Q;AACA,kD;AACA,wB;AACA,6B;AACA,oC;AACA,yB;AACA,W;AACA,M;AACA,O;AACA,M;AACA,Y;AACA,M;AACA,iD;AACA,I;AACA,O;AACA,M;AACA,K;AACA,I;AACA,iB;AACA,sC;AACA,K;AACA,I;AACA,mB;AACA,M;AACA,G;AACA,E;AACA,G;;;;;;;;;;;;;;;;;;;ACnCA,qC;AACA,8E;AACA,kB;AACA,oC;AACA,+C;AACA,iB;AACA,qB;AACA,8B;AACA,uE;AACA,K;AACA,I;;AAEA,sC;AACA,gF;AACA,kB;AACA,gC;AACA,iD;AACA,iB;AACA,wC;AACA,kD;AACA,mB;AACA,0B;AACA,6B;AACA,yF;AACA,S;AACA,yC;AACA,2D;AACA,qB;AACA,2B;AACA,uB;AACA,6B;AACA,wD;AACA,W;AACA,W;AACA,qB;AACA,0B;AACA,6C;AACA,8C;AACA,sD;AACA,Y;AACA,+B;AACA,uB;AACA,gB;AACA,W;AACA,mC;AACA,kD;AACA,mB;AACA,kC;AACA,sD;AACA,qB;AACA,+C;AACA,oD;AACA,uB;AACA,+E;AACA,W;AACA,qB;AACA,oC;AACA,uD;AACA,uB;AACA,iD;AACA,sD;AACA,yB;AACA,gF;AACA,a;AACA,uB;AACA,sC;AACA,2D;AACA,yB;AACA,mD;AACA,wD;AACA,2B;AACA,oF;AACA,e;AACA,yB;AACA,wC;AACA,8D;AACA,2B;AACA,qD;AACA,0D;AACA,6B;AACA,uF;AACA,iB;AACA,2B;AACA,0C;AACA,+D;AACA,6B;AACA,uD;AACA,4D;AACA,+B;AACA,wF;AACA,mB;AACA,6B;AACA,4C;AACA,iE;AACA,+B;AACA,yD;AACA,8D;AACA,iC;AACA,0F;AACA,qB;AACA,+B;AACA,8C;AACA,iE;AACA,iC;AACA,2D;AACA,gE;AACA,mC;AACA,0F;AACA,uB;AACA,qB;AACA,mB;AACA,iB;AACA,e;AACA,a;AACA,W;AACA,S;AACA,iC;AACA,4E;AACA,mB;AACA,gC;AACA,S;AACA,K;AACA,I;;AAEA,4C;AACA,4F;AACA,kB;AACA,2C;AACA,mD;AACA,iB;AACA,uB;AACA,qC;AACA,8B;AACA,8C;AACA,mB;AACA,+C;AACA,sD;AACA,qB;AACA,uE;AACA,mC;AACA,8E;AACA,qB;AACA,kC;AACA,W;AACA,oB;AACA,qC;AACA,c;AACA,iB;AACA,e;AACA,O;AACA,I;;AAEA,6C;AACA,8F;AACA,kB;AACA,8B;AACA,mD;AACA,iB;AACA,4B;AACA,qC;AACA,uC;AACA,8C;AACA,mB;AACA,qE;AACA,oB;AACA,qC;AACA,c;AACA,iB;AACA,gB;AACA,K;AACA,I;;AAEA,6C;AACA,8F;AACA,kB;AACA,oB;AACA,yB;AACA,6D;AACA,uD;AACA,qB;AACA,yC;AACA,W;AACA,K;AACA,+B;AACA,mE;AACA,iB;AACA,sC;AACA,mE;AACA,mB;AACA,6C;AACA,gB;AACA,mD;AACA,kD;AACA,6E;AACA,U;AACA,qB;AACA,2E;AACA,S;AACA,mB;AACA,gD;AACA,oD;AACA,S;AACA,O;AACA,iB;AACA,gC;AACA,qD;AACA,mB;AACA,gD;AACA,oD;AACA,S;AACA,mB;AACA,6C;AACA,gB;AACA,kD;AACA,sE;AACA,U;AACA,qB;AACA,2E;AACA,S;AACA,O;AACA,W;AACA,I;;AAEA,8C;AACA,gG;AACA,kB;AACA,oB;AACA,oC;AACA,8C;AACA,sD;AACA,M;AACA,I;;AAEA,2C;AACA,0F;AACA,kB;AACA,oB;AACA,iC;AACA,gB;AACA,mC;AACA,sB;AACA,iB;AACA,uB;AACA,qD;AACA,K;AACA,Y;AACA,I;;AAEA,6C;AACA,8F;AACA,kB;AACA,oB;AACA,yD;AACA,0B;AACA,mE;AACA,iB;AACA,sC;AACA,mE;AACA,mB;AACA,6C;AACA,gB;AACA,mD;AACA,kD;AACA,8E;AACA,sC;AACA,U;AACA,qB;AACA,2E;AACA,S;AACA,mB;AACA,gD;AACA,oD;AACA,S;AACA,O;AACA,iB;AACA,2C;AACA,c;AACA,gD;AACA,qE;AACA,oC;AACA,Q;AACA,mB;AACA,yE;AACA,O;AACA,M;AACA,I;;AAEA,2C;AACA,0F;AACA,kB;AACA,kE;AACA,I;;AAEA,0C;AACA,wF;AACA,kB;AACA,8B;AACA,kD;AACA,iB;AACA,uB;AACA,mB;AACA,qC;AACA,yB;AACA,wD;AACA,O;AACA,O;AACA,iB;AACA,sB;AACA,mC;AACA,8C;AACA,sD;AACA,Q;AACA,K;AACA,I;;;;;;;;;;;;;;;;;;;AC1TA,kB;;AAEA,mF;AACA,mE;AACA,wD;AACA,E;;AAEA,0B;;AAEA,kC;;AAEA,+C;AACA,mB;AACA,+D;AACA,wE;AACA,kB;AACA,gC;AACA,C;;AAEA,kE;AACA,oE;AACA,2H;AACA,G;AACA,gB;AACA,mC;AACA,uC;AACA,mB;AACA,G;AACA,Q;AACA,8B;AACA,wC;AACA,O;AACA,G;AACA,C;;AAEA,+C;AACA,wH;AACA,2D;AACA,oB;AACA,C;;AAEA,6C;AACA,uC;AACA,wE;AACA,C;;AAEA,iE;AACA,8C;AACA,gB;AACA,oB;AACA,iB;AACA,yC;AACA,kC;AACA,G;AACA,uB;AACA,6D;AACA,6D;AACA,oB;AACA,yB;AACA,uB;AACA,gD;AACA,kC;AACA,yB;AACA,O;AACA,sC;AACA,0C;AACA,oE;AACA,gF;AACA,8B;AACA,O;AACA,Y;AACA,0B;AACA,O;AACA,O;AACA,gB;AACA,wC;AACA,uD;AACA,O;AACA,e;AACA,K;AACA,mB;AACA,0D;AACA,iB;AACA,K;AACA,gD;AACA,yE;AACA,gF;AACA,gB;AACA,+J;AACA,yB;AACA,O;AACA,S;AACA,sD;AACA,kF;AACA,gF;AACA,G;AACA,I;AACA,O;AACA,G;AACA,Q;AACA,kG;AACA,gD;AACA,0C;AACA,sC;AACA,uB;AACA,qB;AACA,mH;AACA,gB;AACA,uB;AACA,uH;AACA,gB;AACA,O;AACA,O;AACA,iG;AACA,oF;AACA,G;AACA,C;;AAEA,0E;AACA,gC;AACA,uB;AACA,2E;AACA,6D;AACA,yB;AACA,e;AACA,G;AACA,gG;AACA,oD;AACA,gB;AACA,oC;AACA,G;AACA,Q;AACA,2B;AACA,uC;AACA,4D;AACA,O;AACA,kE;AACA,sC;AACA,a;AACA,K;AACA,G;AACA,C;;AAEA,mD;AACA,4C;AACA,C;;AAEA,8C;AACA,iF;AACA,C;;AAEA,6C;AACA,kB;AACA,wC;AACA,0C;AACA,8B;AACA,kE;AACA,qI;AACA,6C;AACA,gC;AACA,O;AACA,W;AACA,G;AACA,0C;AACA,iC;AACA,G;AACA,iI;AACA,yF;AACA,0D;AACA,C;;AAEA,+B;AACA,qB;AACA,2C;AACA,6B;AACA,K;AACA,oB;AACA,iG;AACA,iE;AACA,4F;AACA,O;AACA,K;AACA,oF;AACA,G;AACA,G;;AAEA,gC;AACA,uB;AACA,oB;AACA,mB;AACA,gC;AACA,gC;AACA,2B;AACA,K;AACA,sD;AACA,c;AACA,wB;AACA,qB;AACA,uI;AACA,mB;AACA,O;AACA,yC;AACA,+D;AACA,8H;AACA,c;AACA,0D;AACA,0D;AACA,mB;AACA,S;AACA,O;AACA,kB;AACA,I;AACA,sB;AACA,wG;AACA,I;AACA,wB;AACA,gC;AACA,I;AACA,yB;AACA,gC;AACA,I;AACA,yB;AACA,gC;AACA,I;AACA,0B;AACA,mC;AACA,I;AACA,uB;AACA,gC;AACA,I;AACA,yB;AACA,kC;AACA,I;AACA,wB;AACA,gC;AACA,I;AACA,wB;AACA,2E;AACA,I;AACA,8B;AACA,mC;AACA,oF;AACA,sE;AACA,6C;AACA,oD;AACA,qE;AACA,I;AACA,yB;AACA,qE;AACA,G;AACA,G;;AAEA,+B;AACA,uD;AACA,0E;AACA,I;AACA,2D;AACA,0B;AACA,oC;AACA,8B;AACA,iB;AACA,K;AACA,6D;AACA,oF;AACA,yE;AACA,gD;AACA,uB;AACA,8B;AACA,sB;AACA,wD;AACA,K;AACA,I;AACA,oG;AACA,0B;AACA,4C;AACA,iC;AACA,4B;AACA,oD;AACA,+B;AACA,iB;AACA,O;AACA,4B;AACA,8D;AACA,iB;AACA,O;AACA,K;AACA,gD;AACA,8C;AACA,iE;AACA,qD;AACA,4D;AACA,0G;AACA,4C;AACA,yB;AACA,sC;AACA,oB;AACA,4B;AACA,Q;AACA,4B;AACA,2B;AACA,+D;AACA,kC;AACA,O;AACA,sD;AACA,K;AACA,2B;AACA,G;AACA,G;;AAEA,uC;AACA,yB;AACA,8B;AACA,G;AACA,G;;AAEA,sC;AACA,yB;AACA,sD;AACA,qE;AACA,K;AACA,oB;AACA,I;AACA,wB;AACA,2C;AACA,G;AACA,G;;AAEA,uC;AACA,yB;AACA,4C;AACA,oE;AACA,G;AACA,G;;AAEA,sC;AACA,wD;AACA,oE;AACA,G;AACA,G;;AAEA,sC;AACA,wD;AACA,oE;AACA,G;AACA,G;;AAEA,sD;AACA,kB;AACA,iC;AACA,4B;AACA,iB;AACA,+B;AACA,sC;AACA,K;AACA,K;AACA,G;;AAEA,qC;AACA,qB;AACA,8B;AACA,G;AACA,G;;AAEA,oC;AACA,yC;AACA,sC;AACA,mD;AACA,uD;AACA,uB;AACA,gD;AACA,wB;AACA,uB;AACA,Q;AACA,mD;AACA,K;AACA,G;AACA,G;;AAEA,wC;AACA,wB;AACA,uD;AACA,G;AACA,G;;AAEA,uC;AACA,wD;AACA,oB;AACA,6C;AACA,6B;AACA,oB;AACA,M;AACA,iD;AACA,G;AACA,G;;AAEA,4D;AACA,yC;AACA,G;;AAEA,8D;AACA,2C;AACA,G;;AAEA,8D;AACA,2C;AACA,8C;AACA,oB;AACA,G;;AAEA,kD;AACA,wC;AACA,C;;AAEA,oC;AACA,wB;AACA,mD;AACA,G;AACA,G;;AAEA,mC;AACA,sD;AACA,0B;AACA,gE;AACA,a;AACA,K;AACA,wC;AACA,2B;AACA,oB;AACA,yD;AACA,I;AACA,wC;AACA,wD;AACA,I;AACA,0C;AACA,4C;AACA,0B;AACA,gC;AACA,K;AACA,0B;AACA,iE;AACA,K;AACA,I;AACA,wD;AACA,+B;AACA,8C;AACA,4B;AACA,iB;AACA,O;AACA,K;AACA,4B;AACA,0B;AACA,oC;AACA,6B;AACA,wB;AACA,oC;AACA,O;AACA,iC;AACA,wB;AACA,4B;AACA,uB;AACA,wB;AACA,U;AACA,oD;AACA,O;AACA,K;AACA,U;AACA,oE;AACA,K;AACA,G;AACA,G","file":"/packages/babrahams_editable-json.js","sourcesContent":["Meteor.methods({\n  \n  update: function (collectionName, _id, action) {\n    \n    var Collection = Mongo.Collection.get(collectionName),\n        updated = 0;\n    \n    try {\n    \n      if (!!Package['aldeed:simple-schema'] && !!Package['aldeed:collection2'] && _.isFunction(Collection.simpleSchema) && Collection._c2) {\n        \n        updated = Collection.update(_id, action, {\n          filter: false,\n          autoConvert: false,\n          removeEmptyStrings: false,\n          validate: false\n        });\n      \n      }\n      \n      else {\n      \n        updated = Collection.update(_id, action);\n    \n      }\n      \n    }\n    \n    catch (err) {\n      throw new Meteor.Error(err);    \n    }\n    \n    return updated;\n      \n  }\n  \n});","\nTemplate.__checkName(\"editableJSON\");\nTemplate[\"editableJSON\"] = new Template(\"Template.editableJSON\", (function() {\n  var view = this;\n  return Spacebars.With(function() {\n    return Spacebars.call(view.lookup(\"json\"));\n  }, function() {\n    return HTML.DIV({\n      \"class\": \"editable-JSON\"\n    }, Spacebars.include(view.lookupTemplate(\"editable_JSON_object\")));\n  });\n}));\n\nTemplate.__checkName(\"editable_JSON\");\nTemplate[\"editable_JSON\"] = new Template(\"Template.editable_JSON\", (function() {\n  var view = this;\n  return Blaze.Each(function() {\n    return Spacebars.call(view.lookup(\"fields\"));\n  }, function() {\n    return [ Spacebars.With(function() {\n      return Spacebars.call(view.lookup(\"field\"));\n    }, function() {\n      return [ HTML.SPAN({\n        \"class\": function() {\n          return [ \"editable-JSON-field \", Spacebars.mustache(view.lookup(\"_idClass\")) ];\n        }\n      }, '\"', Spacebars.With(function() {\n        return Spacebars.call(view.lookup(\"editingField\"));\n      }, function() {\n        return HTML.INPUT({\n          type: \"text\",\n          value: function() {\n            return Spacebars.mustache(view.lookup(\".\"));\n          }\n        });\n      }, function() {\n        return HTML.SPAN({\n          \"class\": \"editable-JSON-field-text\"\n        }, Blaze.View(\"lookup:.\", function() {\n          return Spacebars.mustache(view.lookup(\".\"));\n        }));\n      }), '\":'), HTML.CharRef({\n        html: \"&nbsp;\",\n        str: \"Â \"\n      }) ];\n    }), Spacebars.With(function() {\n      return Spacebars.call(view.lookup(\"value\"));\n    }, function() {\n      return Blaze.If(function() {\n        return Spacebars.call(view.lookup(\"isArray\"));\n      }, function() {\n        return Blaze._TemplateWith(function() {\n          return Spacebars.call(view.lookup(\"val\"));\n        }, function() {\n          return Spacebars.include(view.lookupTemplate(\"editable_JSON_array\"));\n        });\n      }, function() {\n        return Blaze.If(function() {\n          return Spacebars.call(view.lookup(\"isDate\"));\n        }, function() {\n          return Blaze._TemplateWith(function() {\n            return Spacebars.call(view.lookup(\"val\"));\n          }, function() {\n            return Spacebars.include(view.lookupTemplate(\"editable_JSON_date\"));\n          });\n        }, function() {\n          return Blaze.If(function() {\n            return Spacebars.call(view.lookup(\"isString\"));\n          }, function() {\n            return Blaze._TemplateWith(function() {\n              return Spacebars.call(view.lookup(\"val\"));\n            }, function() {\n              return Spacebars.include(view.lookupTemplate(\"editable_JSON_string\"));\n            });\n          }, function() {\n            return Blaze.If(function() {\n              return Spacebars.call(view.lookup(\"isBoolean\"));\n            }, function() {\n              return Blaze._TemplateWith(function() {\n                return Spacebars.call(view.lookup(\"val\"));\n              }, function() {\n                return Spacebars.include(view.lookupTemplate(\"editable_JSON_boolean\"));\n              });\n            }, function() {\n              return Blaze.If(function() {\n                return Spacebars.call(view.lookup(\"isObject\"));\n              }, function() {\n                return Blaze._TemplateWith(function() {\n                  return Spacebars.call(view.lookup(\"val\"));\n                }, function() {\n                  return Spacebars.include(view.lookupTemplate(\"editable_JSON_object\"));\n                });\n              }, function() {\n                return Blaze.If(function() {\n                  return Spacebars.call(view.lookup(\"isNumber\"));\n                }, function() {\n                  return Blaze._TemplateWith(function() {\n                    return Spacebars.call(view.lookup(\"val\"));\n                  }, function() {\n                    return Spacebars.include(view.lookupTemplate(\"editable_JSON_number\"));\n                  });\n                }, function() {\n                  return Blaze.If(function() {\n                    return Spacebars.call(view.lookup(\"isNull\"));\n                  }, function() {\n                    return Blaze._TemplateWith(function() {\n                      return Spacebars.call(view.lookup(\"val\"));\n                    }, function() {\n                      return Spacebars.include(view.lookupTemplate(\"editable_JSON_null\"));\n                    });\n                  });\n                });\n              });\n            });\n          });\n        });\n      });\n    }), Blaze.Unless(function() {\n      return Spacebars.dataMustache(view.lookup(\"last\"), view.lookup(\"..\"));\n    }, function() {\n      return [ \",\", HTML.BR() ];\n    }) ];\n  });\n}));\n\nTemplate.__checkName(\"editable_JSON_array\");\nTemplate[\"editable_JSON_array\"] = new Template(\"Template.editable_JSON_array\", (function() {\n  var view = this;\n  return [ \"[\", Spacebars.With(function() {\n    return Spacebars.call(view.lookup(\"elements\"));\n  }, function() {\n    return [ HTML.DIV({\n      \"class\": \"editable-JSON-indent\"\n    }, Blaze.Each(function() {\n      return Spacebars.call(view.lookup(\".\"));\n    }, function() {\n      return [ Blaze._TemplateWith(function() {\n        return Spacebars.call(view.lookup(\"element\"));\n      }, function() {\n        return Spacebars.include(view.lookupTemplate(\"editable_JSON\"));\n      }), Blaze.Unless(function() {\n        return Spacebars.dataMustache(view.lookup(\"last\"), view.lookup(\"..\"));\n      }, function() {\n        return [ \",\", HTML.BR() ];\n      }) ];\n    })), HTML.SPAN({\n      \"class\": \"editable-JSON-closer\"\n    }, \"]\") ];\n  }, function() {\n    return \"]\";\n  }) ];\n}));\n\nTemplate.__checkName(\"editable_JSON_object\");\nTemplate[\"editable_JSON_object\"] = new Template(\"Template.editable_JSON_object\", (function() {\n  var view = this;\n  return Blaze.If(function() {\n    return Spacebars.call(view.lookup(\"notEmpty\"));\n  }, function() {\n    return [ \"{\", HTML.DIV({\n      \"class\": \"editable-JSON-indent\"\n    }, Blaze._TemplateWith(function() {\n      return Spacebars.call(view.lookup(\".\"));\n    }, function() {\n      return Spacebars.include(view.lookupTemplate(\"editable_JSON\"));\n    })), HTML.SPAN({\n      \"class\": \"editable-JSON-closer\"\n    }, \"}\") ];\n  }, function() {\n    return \"{}\";\n  });\n}));\n\nTemplate.__checkName(\"editable_JSON_string\");\nTemplate[\"editable_JSON_string\"] = new Template(\"Template.editable_JSON_string\", (function() {\n  var view = this;\n  return HTML.SPAN({\n    \"class\": function() {\n      return [ \"editable-JSON-string \", Blaze.If(function() {\n        return Spacebars.call(view.lookup(\"_idField\"));\n      }, function() {\n        return \"editable-JSON-_id-value\";\n      }) ];\n    }\n  }, '\"', Blaze.If(function() {\n    return Spacebars.call(view.lookup(\"editable_JSON_collection\"));\n  }, function() {\n    return Spacebars.With(function() {\n      return Spacebars.call(view.lookup(\"editable_JSON_getField\"));\n    }, function() {\n      return Blaze._TemplateWith(function() {\n        return {\n          value: Spacebars.call(view.lookup(\"..\")),\n          field: Spacebars.call(view.lookup(\".\")),\n          collection: Spacebars.call(view.lookup(\"editable_JSON_collection\"))\n        };\n      }, function() {\n        return Spacebars.include(view.lookupTemplate(\"editableJSONInput\"));\n      });\n    }, function() {\n      return Blaze.View(\"lookup:.\", function() {\n        return Spacebars.mustache(view.lookup(\".\"));\n      });\n    });\n  }, function() {\n    return Blaze.If(function() {\n      return Spacebars.call(view.lookup(\"_idField\"));\n    }, function() {\n      return Blaze.View(\"lookup:.\", function() {\n        return Spacebars.mustache(view.lookup(\".\"));\n      });\n    }, function() {\n      return Blaze._TemplateWith(function() {\n        return {\n          value: Spacebars.call(view.lookup(\".\")),\n          field: Spacebars.call(view.lookup(\"editable_JSON_getField\"))\n        };\n      }, function() {\n        return Spacebars.include(view.lookupTemplate(\"editableJSONInput\"));\n      });\n    });\n  }), '\"');\n}));\n\nTemplate.__checkName(\"editable_JSON_boolean\");\nTemplate[\"editable_JSON_boolean\"] = new Template(\"Template.editable_JSON_boolean\", (function() {\n  var view = this;\n  return HTML.SPAN({\n    \"class\": \"editable-JSON-boolean\"\n  }, Blaze.View(\"lookup:boolean\", function() {\n    return Spacebars.mustache(view.lookup(\"boolean\"));\n  }));\n}));\n\nTemplate.__checkName(\"editable_JSON_date\");\nTemplate[\"editable_JSON_date\"] = new Template(\"Template.editable_JSON_date\", (function() {\n  var view = this;\n  return HTML.SPAN({\n    \"class\": \"editable-JSON-date\"\n  }, HTML.SPAN({\n    \"class\": \"editable-JSON-string\"\n  }, '\"', HTML.INPUT({\n    type: \"text\",\n    value: function() {\n      return Spacebars.mustache(view.lookup(\"date\"));\n    }\n  }), '\"'));\n}));\n\nTemplate.__checkName(\"editable_JSON_number\");\nTemplate[\"editable_JSON_number\"] = new Template(\"Template.editable_JSON_number\", (function() {\n  var view = this;\n  return HTML.SPAN({\n    \"class\": \"editable-JSON-number editable-text-trigger\"\n  }, Blaze.If(function() {\n    return Spacebars.call(view.lookup(\"editable_JSON_collection\"));\n  }, function() {\n    return Spacebars.With(function() {\n      return Spacebars.call(view.lookup(\"editable_JSON_getField\"));\n    }, function() {\n      return Blaze._TemplateWith(function() {\n        return {\n          value: Spacebars.call(view.lookup(\"..\")),\n          field: Spacebars.call(view.lookup(\".\")),\n          collection: Spacebars.call(view.lookup(\"editable_JSON_collection\")),\n          number: Spacebars.call(true)\n        };\n      }, function() {\n        return Spacebars.include(view.lookupTemplate(\"editableJSONInput\"));\n      });\n    }, function() {\n      return Blaze.View(\"lookup:.\", function() {\n        return Spacebars.mustache(view.lookup(\".\"));\n      });\n    });\n  }, function() {\n    return Blaze._TemplateWith(function() {\n      return {\n        value: Spacebars.call(view.lookup(\".\")),\n        field: Spacebars.call(view.lookup(\"editable_JSON_getField\")),\n        number: Spacebars.call(true)\n      };\n    }, function() {\n      return Spacebars.include(view.lookupTemplate(\"editableJSONInput\"));\n    });\n  }));\n}));\n\nTemplate.__checkName(\"editable_JSON_null\");\nTemplate[\"editable_JSON_null\"] = new Template(\"Template.editable_JSON_null\", (function() {\n  var view = this;\n  return HTML.Raw('<span class=\"editable-JSON-null\">null</span>');\n}));\n\nTemplate.__checkName(\"editableJSONInput\");\nTemplate[\"editableJSONInput\"] = new Template(\"Template.editableJSONInput\", (function() {\n  var view = this;\n  return Blaze.If(function() {\n    return Spacebars.call(view.lookup(\"editing\"));\n  }, function() {\n    return HTML.INPUT({\n      type: \"text\",\n      \"class\": \"editable-JSON-input\",\n      value: function() {\n        return Spacebars.mustache(view.lookup(\"value\"));\n      }\n    });\n  }, function() {\n    return HTML.SPAN({\n      \"class\": \"editable-JSON-edit\"\n    }, Blaze.View(\"lookup:value\", function() {\n      return Spacebars.mustache(view.lookup(\"value\"));\n    }));\n  });\n}));\n","EditableJSON = {};\n\nEditableJSON.afterUpdate = function (store, action, JSONbefore, documentsUpdated) {\n  // Overwrite this function to create a callback after every edit\t\n  // `this` is the document or the json after the update\n};\n\nEditableJSONInternal = {};\n\nEditableJSONInternal.timer = null;\n\nEditableJSONInternal.resize = function (elem) {\n  var el = $(elem);\n  EditableJSONInternal.editing_key_press.fakeEl.text(el.val());\n  var width = EditableJSONInternal.editing_key_press.fakeEl.width() + 8;\n  el.width(width);\n  el.css('min-width',width);    \n}\n\nEditableJSONInternal.editing_key_press = function (elem,noDelay) {\n  if (EditableJSONInternal.editing_key_press.fakeEl === undefined) {\n    EditableJSONInternal.editing_key_press.fakeEl = $('<span class=\"editable-JSON-input\">').hide().appendTo(document.body);\n  }\n  if (noDelay) {\n    var input = elem.find('input');\n    EditableJSONInternal.resize(input);\n    input.select();\n  }\n  else {\n    Meteor.defer(function () {\n      EditableJSONInternal.resize(elem);\n    });\n  }\n}\n\nEditableJSONInternal.getContext = function () {\n  var jsonTemplateData = Template && Template.parentData(function (data) { return _.isObject(data) && data.document; });\n  var data = jsonTemplateData && jsonTemplateData.document;\n  return data || {};\n}\n\nEditableJSONInternal.getField = function () {\n  var field = Blaze._parentData(1).fld;\n  return (!(EditableJSON.disableIdField && field === '_id')) && field;  \n}\n\nEditableJSONInternal.update = function (tmpl, modifier, action) {\n  var collectionName = tmpl.get('collection');\n  if (!action) {\n    var action = {};\n    var mod = {};\n    mod[modifier.field] = modifier.value;\n    action[modifier.action] = mod;\n  }\n  if (collectionName) {\n    // Validate -- make sure the change isn't on the id field\n    // And make sure we're not modifying the same field twice\n    var okay = true;\n    var conflict = false;\n    var modFields = [];\n    _.each(action, function (modifier, action) {\n      if (_.has(modifier,'_id')) {\n        okay = false;    \n      }\n      var field = _.keys(modifier)[0];\n      if (!_.contains(modFields, field)) {\n        // The following prevents all errors, but is too restrictive\n        // && !_.find(modFields,function (f){ return field.indexOf(f) !== -1; })\n        modFields.push(field);\n      }\n      else {\n        conflict = true;  \n      }\n    });\n    if (!okay) {\n      if (EditableJSON.disableIdField) {\n        console.log(\"You can't change the _id field.\");\n      }\n      return;  \n    }\n    if (conflict) {\n      console.log(\"You can't use conflicting modifiers.\");\n      return;    \n    }\n    var doc = EditableJSONInternal.getContext();\n    // Mongo.Collection.get(collectionName).update({_id:doc._id},action);\n    Meteor.call('update', collectionName, doc._id, action, function (err, res) {\n      if (err) {\n        console.log(\"You can't use conflicting modifiers.\"); // We're making a big assumption here in giving this message -- TODO -- actually check the message\n        console.log(err);\n      }\n\t  else {\n\t\tif (res && _.isFunction(EditableJSON.afterUpdate)) {\n\t\t  var mutatedDoc = Mongo.Collection.get(collectionName).findOne({_id: doc._id});\n\t\t  EditableJSON.afterUpdate.call(mutatedDoc, collectionName, action, doc, res);\n\t\t}\n\t  }\n    });\n  }\n  else {\n\tvar JSONbefore = Session.getJSON('editableJSON' + EditableJSONInternal.store(tmpl.get('store')));\n    _.each(action, function (modifier, action) {\n      var fieldName = _.keys(modifier)[0];\n      var value = modifier[fieldName];\n      switch (action) {\n        case '$set' :\n          Session.setJSON('editableJSON' + EditableJSONInternal.store(tmpl.get('store')) + '.' + fieldName, value);\n          break;\n        case '$unset' :\n          Session.setJSON('editableJSON' + EditableJSONInternal.store(tmpl.get('store')) + '.' + fieldName, undefined);\n          break;\n      }\n    });\n\tvar JSONafter = Session.getJSON('editableJSON' + EditableJSONInternal.store(tmpl.get('store')));\n\tEditableJSON.afterUpdate.call(JSONafter, tmpl.get('store'), action, JSONbefore, 1);\n  }\n}\n\nEditableJSONInternal.saveToSession = function (evt, tmpl, self, noDelay) {\n  var elem = tmpl.$(evt.target);\n  var val = elem.val();\n  if (self.number && !/^(\\-|\\+)?([0-9]+(\\.[0-9]+)?|Infinity)$/.test(val)) {\n    // If it's not a number, just revert the value and return\n    elem.val(self.value);\n    return;    \n  }\n  var field = 'editableJSON' + EditableJSONInternal.store(tmpl.get('store')) + '.' + self.field;\n  var value = (self.number) ? parseFloat(val) : val;\n  if (noDelay) {\n    Session.setJSON(field, value);  \n  }\n  else {\n    if (!self.collection) {\n      if (EditableJSONInternal.timer) {\n        Meteor.clearTimeout(EditableJSONInternal.timer);    \n      }\n      EditableJSONInternal.timer = Meteor.setTimeout(function () {\n        Session.setJSON(field, value);\n      },300);\n    }\n  }\n}\n\nEditableJSONInternal.store = function (storeName) {\n  return (storeName) ? '.' + storeName : '';\n}\n\nEditableJSON.retrieve = function (storeName) {\n  return Session.getJSON('editableJSON' + EditableJSONInternal.store(storeName));\n}\n\nTemplate.editableJSON.created = function () {\n  var self = this;\n  self.editingField = new ReactiveVar();\n  if (self.data && self.data.collection) {\n    self.autorun(function () {\n      var Collection = Mongo.Collection.get(self.data.collection);\n      var doc = Collection && Collection.find().count() && self.data.document; // Collection.find().count() is the reactivity trigger\n      self.collection = self.data.collection;\n      self.document = doc || {};\n    });\n    return;\n  }\n  else if (self.data && self.data.store) {\n    self.store = self.data.store;\n  }\n  var initialValue = (!_.isUndefined(self.data.json)) ? self.data.json : (((self.store) ? self.parent().data : self.data) || {});\n  Session.setJSON('editableJSON' + EditableJSONInternal.store(self.store), initialValue);\n  // To keep the state of which field name is being edited\n}\n\nTemplate.editableJSON.helpers({\n  json: function () {\n    if (this.collection && this.document) {\n      return this.document;  \n    }\n    if (this.json) {\n      var currentData = Session.getJSON('editableJSON' + EditableJSONInternal.store(this.store));\n      if (_.isUndefined(currentData) || _.isEmpty(currentData)) {\n        Session.setJSON('editableJSON' + EditableJSONInternal.store(this.store), this.json);\n      }\n    }\n    return Session.getJSON('editableJSON' + EditableJSONInternal.store(this.store));\n  }\n});\n\nTemplate.editable_JSON.helpers({\n  fields: function () {\n    var self = this;\n    var index = -1;\n    if (_.has(self,'____val')) {\n      index = self.arrIndex - 1;\n      delete self.arrIndex;\n    }\n    var fields = _.map(self, function (value, field) {\n      index++;\n      var parent = null;\n      var number = 2;\n      while (Blaze._parentData(number) && Blaze._parentData(number)._id === undefined && Blaze._parentData(number).fld === undefined) {\n        number++;  \n      }\n      parent = Blaze._parentData(number);\n      var currentField = (field !== '____val') ? field : index;\n      var fld = (parent && parent.fld) ? parent.fld + ((currentField !== undefined) ? '.' + currentField : '') : currentField;\n      return {\n        field:(field !== '____val') ? currentField : null,\n        value:{val: value, fld: fld, field: currentField},\n        index:index\n      }; \n    });\n    return fields;\n  },\n  value: function () {\n    return (_.isObject(this.value) && _.has(this.value, '____val')) ? this.value.____val : this.value;  \n  },\n  isArray: function () {\n    return _.isArray(this.val); \n  },\n  isObject: function () {\n    return _.isObject(this.val);\n  },\n  isString: function () {\n    return _.isString(this.val);\n  },\n  isBoolean: function () {\n    return _.isBoolean(this.val);  \n  },\n  isDate: function () {\n    return _.isDate(this.val);  \n  },\n  isNumber: function () {\n    return _.isNumber(this.val);  \n  },\n  isNull : function () {\n    return _.isNull(this.val);  \n  },\n  last: function (obj) {\n    return (obj.____val !== undefined) || _.size(obj) === (this.index + 1);\n  },\n  editingField : function () {\n    var fieldName = this.toString()\n    var fldData = Template.parentData(function (data) { return data && data.fld; });\n    var fld = fldData && (fldData.fld + '.' + fieldName) || fieldName;\n    var template = Blaze._templateInstance();\n    var editingField = template.get('editingField');\n    return editingField && (editingField.get() === fld) && fieldName;\n  },\n  _idClass: function () {\n    return (String(this) === \"_id\") ? \"editable-JSON-_id-field\" : \"\";\n  }\n});\n\nTemplate.editable_JSON.events({\n  'click .editable-JSON-field' : function (evt, tmpl) {\n    tmpl.$(evt.target).find('.editable-JSON-field-text').trigger('click');\n  },\n  'click .editable-JSON-field-text' : function (evt,tmpl) {\n    evt.stopPropagation();\n    var fieldName = this.toString();\n    if (fieldName === '_id') {\n      return;    \n    }\n    var elem = $(evt.target).closest('.editable-JSON-field');\n    var fldData = Template.parentData(function (data) { return data && data.fld; });\n    var field = fldData && (fldData.fld + '.' + fieldName) || fieldName; \n    var editingField = tmpl.get('editingField');\n    if (editingField) {\n      editingField.set(field);\n      Tracker.flush();\n      EditableJSONInternal.editing_key_press(elem,true);\n    }\n  },\n  'keydown .editable-JSON-field input, focusout .editable-JSON-field input' : function (evt, tmpl) {\n    evt.stopPropagation();\n    var charCode = evt.which || evt.keyCode;\n    if (evt.type === 'keydown') {\n      if (charCode === 27) {\n        var editingField = tmpl.get('editingField');\n        editingField.set(null);\n        return;  \n      }\n      if (charCode !== 13) {\n        EditableJSONInternal.editing_key_press($(evt.target));\n        return;  \n      }\n    }\n    var editingField = tmpl.get('editingField');\n    var currentFieldName = editingField.get();\n    var parentFieldName = _.initial(currentFieldName.split('.'));\n    var editedFieldName = $(evt.currentTarget).val();\n    var rejoinedParentFieldName = parentFieldName.join('.');\n    var newFieldName = ((rejoinedParentFieldName) ? rejoinedParentFieldName + '.' : '') + editedFieldName;\n    if (newFieldName !== currentFieldName) {\n      var modifier1 = {};\n      modifier1[currentFieldName] = 1;\n      var action = {\n        \"$unset\" : modifier1\n      };\n      if (editedFieldName) {\n        var modifier2 = {};\n        modifier2[newFieldName] = tmpl.data[this.toString()];  \n        action[\"$set\"] = modifier2\n      }\n      EditableJSONInternal.update(tmpl, null, action);\n    }\n    editingField.set(null);\n  }\n});\n\nTemplate.editable_JSON_object.helpers({\n  notEmpty: function () {\n    return !_.isEmpty(this);  \n  }\n});\n\nTemplate.editable_JSON_array.helpers({\n  elements: function () {\n  var elements = _.map(this, function (value, index) {\n    return {element:{____val: value, arrIndex: index}, index: index};\n  });\n    return elements;\n  },\n  last: function (arr) {\n    return arr.length === (this.index + 1);\n  }\n});\n\nTemplate.editable_JSON_string.helpers({\n  _idField: function () {\n    var parentData = Template.parentData(1);\n    return parentData && parentData.fld && parentData.fld === '_id';\n  }\n});\n\nTemplate.editable_JSON_string.events({\n  'click .editable-JSON-string' : function (evt, tmpl) {\n    tmpl.$(evt.target).find('.editable-JSON-edit').trigger('click');\n  }\n});\n\nTemplate.editable_JSON_number.events({\n  'click .editable-JSON-number' : function (evt, tmpl) {\n    tmpl.$(evt.target).find('.editable-JSON-edit').trigger('click');\n  }\n});\n\n/*Template.editable_JSON_date.rendered = function () {\n  var self = this;\n  var field = this.$('input')[0];\n  var picker = new Pikaday({\n    field: field,\n    onSelect: function (date) {\n      field.value = picker.toString();\n    }\n  });\n}*/\n\nTemplate.editable_JSON_date.helpers({\n  date: function () {\n    return this.toISOString();\n  }\n});\n\nTemplate.editable_JSON_date.events({\n  'change input' : function (evt, tmpl) {\n     var currentDate = new Date(this);\n     var newDate = new Date(tmpl.$('input').val());\n     if (currentDate.getTime() !== newDate.getTime()) {\n       var modifier = {\n         field: EditableJSONInternal.getField(),\n         value: newDate,\n         action: \"$set\"\n       }\n       EditableJSONInternal.update(tmpl, modifier);\n    }\n  }\n});\n\nTemplate.editable_JSON_boolean.helpers({\n  boolean: function () {\n    return (this.valueOf() == true) ? 'true' : 'false';\n  }\n});\n\nTemplate.editable_JSON_boolean.events({\n  'click .editable-JSON-boolean' : function (evt,tmpl) {\n    var modifier = {\n      field: EditableJSONInternal.getField(),\n      value: !this.valueOf(),\n      action: \"$set\"\n    };\n    EditableJSONInternal.update(tmpl,modifier);  \n  }\n});\n\nBlaze.registerHelper('editable_JSON_getField', function () {\n  return EditableJSONInternal.getField();\n});\n\nBlaze.registerHelper('editable_JSON_getContext', function () {\n  return EditableJSONInternal.getContext();\n});\n\nBlaze.registerHelper('editable_JSON_collection', function () {\n  var template = Blaze._templateInstance();\n  var collection = template.get('collection');\n  return collection;\n});\n\nTemplate.editableJSONInput.created = function () {\n  this.editing = new ReactiveVar(false);\n}\n\nTemplate.editableJSONInput.helpers({\n  editing: function () {\n    return Blaze._templateInstance().editing.get();\n  }\n});\n\nTemplate.editableJSONInput.events({\n  'click .editable-JSON-edit' : function (evt, tmpl) {\n    evt.stopPropagation();\n    if (EditableJSON.disableIdField && String(this) === '_id') {\n      return;\n    }\n    var parent = $(evt.target).parent();\n    tmpl.editing.set(true);\n    Tracker.flush();\n    EditableJSONInternal.editing_key_press(parent, true);\n  },\n  'input input' : function (evt, tmpl) {\n    EditableJSONInternal.saveToSession(evt, tmpl, this);\n  },\n  'keydown input' : function (evt, tmpl) {\n    var charCode = evt.which || evt.keyCode;\n    if (charCode === 27) {\n      tmpl.editing.set(false);  \n    }\n    if (charCode !== 13) {\n      EditableJSONInternal.editing_key_press(tmpl.$(evt.target));\n    }\n  },\n  'keyup input, focusout input' : function (evt, tmpl) {\n    if (evt.type === 'keyup') {\n      var charCode = evt.which || evt.keyCode;\n      if (charCode !== 13) {\n        return;  \n      }\n    }\n    tmpl.editing.set(false);\n    if (this.collection) {\n      var elem = tmpl.$(evt.target);\n      var value = elem.val();\n      if (this.number) {\n        value = parseFloat(value);  \n      }\n      if (value !== this.value) {\n        var modifier = {\n          field: this.field,\n          value: value,\n          action: \"$set\"\n        };\n        EditableJSONInternal.update(tmpl, modifier);\n      }\n    }\n    else {\n      EditableJSONInternal.saveToSession(evt, tmpl, this, true);    \n    }\n  }\n});"]}