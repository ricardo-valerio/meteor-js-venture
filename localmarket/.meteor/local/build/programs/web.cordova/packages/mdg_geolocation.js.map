)]}'
{"version":3,"file":"/packages/mdg:geolocation.js","sources":["mdg:geolocation/geolocation.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,uC;AACA,6B;;AAEA,2C;AACA,qC;;AAEA,gC;AACA,kC;;AAEA,4B;AACA,e;AACA,2B;AACA,e;AACA,E;;AAEA,mC;AACA,sB;AACA,E;;AAEA,yC;AACA,4B;AACA,kB;AACA,E;;AAEA,yC;AACA,oD;AACA,sE;AACA,4B;AACA,G;AACA,E;;AAEA,U;;AAEA,G;AACA,wD;AACA,a;AACA,G;AACA,e;AACA,K;AACA,+C;AACA,gC;AACA,qF;AACA,mD;AACA,K;AACA,sB;AACA,4B;AACA,uB;AACA,I;;AAEA,K;AACA,sC;AACA,kC;AACA,0E;AACA,yE;AACA,K;AACA,gC;AACA,4B;AACA,0B;AACA,I;AACA,iD;AACA,E;AACA,K;AACA,oD;AACA,uE;AACA,yC;AACA,K;AACA,uB;AACA,4C;;AAEA,c;AACA,c;AACA,iC;AACA,iC;AACA,Q;AACA,K;;AAEA,gB;AACA,G;AACA,E","sourcesContent":["// is location refreshing currently on?\nvar watchingPosition = false;\n\n// current location variable and dependency\nvar location = new ReactiveVar(null);\n\n// error variable and dependency\nvar error = new ReactiveVar(null);\n\n// options for watchPosition\nvar options = {\n  enableHighAccuracy: true,\n  maximumAge: 0\n};\n\nvar onError = function (newError) {\n  error.set(newError);\n};\n\nvar onPosition = function (newLocation) {\n  location.set(newLocation);\n  error.set(null);\n};\n\nvar startWatchingPosition = function () {\n  if (! watchingPosition && navigator.geolocation) {\n    navigator.geolocation.watchPosition(onPosition, onError, options);\n    watchingPosition = true;\n  }\n};\n\n// exports\n\n/**\n * @summary The namespace for all geolocation functions.\n * @namespace\n */\nGeolocation = {\n  /**\n   * @summary Get the current geolocation error\n   * @return {PositionError} The\n   * [position error](https://developer.mozilla.org/en-US/docs/Web/API/PositionError)\n   * that is currently preventing position updates.\n   */\n  error: function () {\n    startWatchingPosition();\n    return error.get();\n  },\n\n  /**\n   * @summary Get the current location\n   * @return {Position | null} The\n   * [position](https://developer.mozilla.org/en-US/docs/Web/API/Position)\n   * that is reported by the device, or null if no position is available.\n   */\n  currentLocation: function () {\n    startWatchingPosition();\n    return location.get();\n  },\n  // simple version of location; just lat and lng\n  \n  /**\n   * @summary Get the current latitude and longitude\n   * @return {Object | null} An object with `lat` and `lng` properties,\n   * or null if no position is available.\n   */\n  latLng: function () {\n    var loc = Geolocation.currentLocation();\n\n    if (loc) {\n      return {\n        lat: loc.coords.latitude,\n        lng: loc.coords.longitude\n      };\n    }\n\n    return null;\n  }\n};"]}