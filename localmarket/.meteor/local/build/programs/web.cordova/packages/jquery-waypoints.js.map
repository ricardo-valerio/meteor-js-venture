)]}'
{"version":3,"sources":["jquery-waypoints/waypoints.coffee"],"names":[],"mappings":"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","file":"/packages/jquery-waypoints.js","sourcesContent":["###\njQuery Waypoints - v2.0.4\nCopyright (c) 2011-2014 Caleb Troughton\nDual licensed under the MIT license and GPL license.\nhttps://github.com/imakewebthings/jquery-waypoints/blob/master/licenses.txt\n###\n((root, factory) ->\n  if typeof define is 'function' and define.amd\n    define 'waypoints', ['jquery'], ($) ->\n      factory $, root\n  else\n    factory root.jQuery, root\n) this, ($, window) ->\n  $w = $ window\n\n  # Touch support feature test\n  isTouch = 'ontouchstart' in window\n\n  # Internal plugin-wide variables:\n\n  # - allWaypoints: A hash containing two hashes, one for vertical waypoints\n  #   and one for horizontal waypoints. In each hash they value is a Waypoint\n  #   instance and the key is that waypoint's unique ID.\n\n  # - contextCounter: A counter that is incremented with each instantiation\n  #   of the Context class, used in its unique ID.\n\n  # - contexts: A hash of all contexts. The value of each entry is a Context\n  #   instance and the key is that context's unique ID.\n\n  # - contextKey: The DOM element for each context keeps a reference to the\n  #   context's unique ID in the jQuery .data() object. This is the key for\n  #   that data entry.\n\n  # - resizeEvent: The namespaced resize event used by contexts.\n\n  # - scrollEvent: The namespaced scroll event used by contexts.\n\n  # - waypointCounter: A counter that is incremented with each instantiation\n  #   of the Waypoint class, used in its unique ID.\n\n  # - waypointKey: The DOM element for each waypoint keeps a reference to an\n  #   array of the unique IDs of all waypoints attached to that element. This\n  #   array is kept in the jQuery .data() object, and this is the key for\n  #   that entry.\n\n  # - wp: A variable shortcut for the waypoint method name on the $.fn object.\n  #   Using this variable just helps with minification.\n\n  # - wps: A variable shortcut for the waypoints method name on the $ object.\n  #   Using this variable just helps with minification.\n\n  allWaypoints = \n    horizontal: {}\n    vertical: {}\n  contextCounter = 1\n  contexts = {}\n  contextKey = 'waypoints-context-id'\n  resizeEvent = 'resize.waypoints'\n  scrollEvent = 'scroll.waypoints'\n  waypointCounter = 1\n  waypointKey = 'waypoints-waypoint-ids'\n  wp = 'waypoint'\n  wps = 'waypoints'\n\n  # Context: Represents a single scrolling element in which waypoints live.\n  # For most users there will only be one Context, the window, but users can\n  # use other scrollable elements as a context using the \"context\" option\n  # when creating waypoints.\n\n  # Properties:\n\n  # - $element: jQuery object containing the context element.\n\n  # - element: The raw HTMLNode of the context element.\n\n  # - didResize: A flag used in throttling the resize event.\n\n  # - didScroll: A flag used in throttling the scroll event.\n\n  # - id: A unique identifier for the context.\n\n  # - oldScroll: A hash containing...\n  #   - x: The context's last known horizontal scroll value.\n  #   - y: The context's last known vertical scroll value.\n\n  # - waypoints: A hash containing two hashes with all waypoints in the context.\n  #   Entries are in the same style as the allWaypoints hashes:\n  #   (key = waypoint.id, value = waypoint)\n  #   - horizontal: A hash of all horizontal waypoints.\n  #   - vertical: A hash of all vertical waypoints.\n\n  class Context\n    constructor: ($element) ->\n      @$element = $element\n      @element = $element[0]\n      @didResize = no\n      @didScroll = no\n      @id = 'context' + contextCounter++\n      @oldScroll =\n        x: $element.scrollLeft()\n        y: $element.scrollTop()\n      @waypoints =\n        horizontal: {}\n        vertical: {}\n      \n      # We need to keep a reference to this Context instance on the DOM node\n      # so we can look it up later based on the node.\n      @element[contextKey] = @id\n\n      # To do that look up, we need to have this instance in the global hash.\n      contexts[@id] = this\n\n      # Run scroll checks on scroll, but throttle it for performance reasons.\n      $element.bind scrollEvent, =>\n        unless @didScroll or isTouch\n          @didScroll = yes\n          scrollHandler = =>\n            @doScroll()\n            @didScroll = no\n          window.setTimeout scrollHandler, $[wps].settings.scrollThrottle\n\n      # Run a refresh on resize, but throttle it for performance reasons.\n      $element.bind resizeEvent, =>\n        unless @didResize\n          @didResize = yes\n          resizeHandler = =>\n            $[wps] 'refresh'\n            @didResize = no\n          window.setTimeout resizeHandler, $[wps].settings.resizeThrottle\n\n    # doScroll()\n\n    # Looks at the new scroll values for the context, compares them to the old\n    # scroll values, and checks to see if any waypoints should be triggered\n    # by that change.\n    doScroll: ->\n\n      # We use some hashes with common values for each axis so that we can\n      # just iterate over it rather than write the whole thing twice for\n      # each axis.\n      axes =\n        horizontal:\n          newScroll: @$element.scrollLeft()\n          oldScroll: @oldScroll.x\n          forward: 'right'\n          backward: 'left'\n        vertical:\n          newScroll: @$element.scrollTop()\n          oldScroll: @oldScroll.y\n          forward: 'down'\n          backward: 'up'\n\n      # This is a small \"hack\" for iOS, needed because scrolls in mobile\n      # Safari that start or end with the URL bar showing will cause window\n      # height changes without firing a resize event.\n      if isTouch and (!axes.vertical.oldScroll or !axes.vertical.newScroll)\n          $[wps] 'refresh'\n\n      # For each axis, check to see if any waypoints have been crossed.\n      # Also determine the direction it's being crossed and sort/reverse all\n      # crossed waypoints accordingly. And, of course, trigger the waypoints.\n      $.each axes, (aKey, axis) =>\n        triggered = []\n        isForward = axis.newScroll > axis.oldScroll\n        direction = if isForward then axis.forward else axis.backward\n        $.each @waypoints[aKey], (wKey, waypoint) ->\n          if axis.oldScroll < waypoint.offset <= axis.newScroll\n            triggered.push waypoint\n          else if axis.newScroll < waypoint.offset <= axis.oldScroll\n            triggered.push waypoint\n        triggered.sort (a, b) -> a.offset - b.offset\n        triggered.reverse() unless isForward\n        $.each triggered, (i, waypoint) ->\n          if waypoint.options.continuous or i is triggered.length - 1\n            waypoint.trigger [direction]\n\n      # Now that we're done with the check, the new scroll values become\n      # the old scroll values for the next check.\n      @oldScroll =\n        x: axes.horizontal.newScroll\n        y: axes.vertical.newScroll\n\n    # refresh()\n    # Runs through all of the waypoints in the context and recalculates\n    # their offsets (the scroll value at which the waypoint is triggered.)\n    # If a change in offset also happens to cross the context's current\n    # scroll value, the waypoint will be triggered in the appropriate direction\n    # unless prevented by the \"onlyOnScroll\" waypoint option.\n    refresh: () ->\n      isWin = $.isWindow @element\n      cOffset = @$element.offset()\n\n      # Make sure we have the most up-to-date scroll values for our context.\n      @doScroll()\n\n      # Each axis recalculation needs to know some things:\n\n      # - contextOffset: The distance between the edge of the document and\n      #   the context element.\n      \n      # - contextScroll: The scroll value of the context. However, if the\n      #   context is the window this needs to be 0 because this value only\n      #   comes into play when used in adjustment calculations for non-window\n      #   context waypoints.\n\n      # - contextDimension: Width or height of the context.\n\n      # - oldScroll: The scroll value of the context. Unlike \"contextScroll\",\n      #   this is the same no matter the type of context, and is used when\n      #   determining whether a newly added waypoint should immediately fire\n      #   on its first offset calculation.\n\n      # - forward: Direction string passed to forward waypoint triggers.\n\n      # - backward: Direction string passed to backward waypoint triggers.\n\n      # - offsetProp: Key of the .offset() object for this axis.\n      axes =\n        horizontal:\n          contextOffset: if isWin then 0 else cOffset.left\n          contextScroll: if isWin then 0 else @oldScroll.x\n          contextDimension: @$element.width()\n          oldScroll: @oldScroll.x\n          forward: 'right'\n          backward: 'left'\n          offsetProp: 'left'\n        vertical:\n          contextOffset: if isWin then 0 else cOffset.top\n          contextScroll: if isWin then 0 else @oldScroll.y\n          contextDimension: if isWin then $[wps]('viewportHeight') else \\\n            @$element.height()\n          oldScroll: @oldScroll.y\n          forward: 'down'\n          backward: 'up'\n          offsetProp: 'top'\n\n      # For each axis, run through the waypoints. Store the old offset.\n      # Recalculate the new offset. Check the difference against the context's\n      # current scroll value and trigger any crossed waypoints accordingly.\n      $.each axes, (aKey, axis) =>\n        $.each @waypoints[aKey], (i, waypoint) ->\n          adjustment = waypoint.options.offset\n          oldOffset = waypoint.offset\n          elementOffset = if $.isWindow waypoint.element then 0 else \\\n            waypoint.$element.offset()[axis.offsetProp]\n\n          # The \"offset\" waypoint option (which we call \"adjustment\" here) can\n          # be a number, percentage string, keyword string (bottom-in-view),\n          # or a function. So we deal with all of these types here.\n          if $.isFunction adjustment\n            adjustment = adjustment.apply waypoint.element\n          else if typeof adjustment is 'string'\n            adjustment = parseFloat adjustment\n            if waypoint.options.offset.indexOf('%') > -1\n              adjustment = Math.ceil(axis.contextDimension * adjustment / 100)\n\n          # We've finally calculated all the crazy little adjustments that\n          # can come from using non-window contexts and the \"offset\" option.\n          # Store the damn thing.\n          waypoint.offset = elementOffset \\\n                          - axis.contextOffset \\\n                          + axis.contextScroll \\\n                          - adjustment\n\n          # \"onlyOnScroll\" tells us to not even consider triggering waypoints\n          # during refresh, so we can eject early.\n          return if (waypoint.options.onlyOnScroll and oldOffset?) or \\\n                    !waypoint.enabled\n\n          # Case where the refresh causes a backward trigger.\n          if oldOffset isnt null and \\\n            oldOffset < axis.oldScroll <= waypoint.offset\n              waypoint.trigger [axis.backward]\n\n          # Now the forward case.\n          else if oldOffset isnt null and \\\n            oldOffset > axis.oldScroll >= waypoint.offset\n              waypoint.trigger [axis.forward]\n\n          # \"oldOffset\" values of null mean this is the first calculation of\n          # the waypoint's offset. It's a special time in a waypoint's life.\n          else if oldOffset is null and axis.oldScroll >= waypoint.offset\n            waypoint.trigger [axis.forward]\n\n    # checkEmpty()\n\n    # Looks at the waypoints hashes. If they are empty, the context removes\n    # itself from the global contexts hash.\n    checkEmpty: ->\n      if $.isEmptyObject(@waypoints.horizontal) and \\\n        $.isEmptyObject(@waypoints.vertical)\n          @$element.unbind [resizeEvent, scrollEvent].join(' ')\n          delete contexts[@id]\n\n  # Waypoint: Represents a single callback function tied to an element. An\n  # element can have multiple waypoints with multiple offsets.\n\n  # Properties:\n\n  # - $element: jQuery object containing the waypoint element.\n\n  # - element: The raw HTMLNode of the waypoint element.\n\n  # - axis: 'horizontal' || 'vertical' - The axis on which this waypoint lives.\n\n  # - callback: The function that is fired when the waypoint is triggered.\n\n  # - context: A reference to the context this waypoint belongs to.\n\n  # - enabled: Boolean indicating whether this waypoint is enabled or not.\n  #   Disabled waypoints are still returned in functions that aggregate\n  #   waypoints, but do not fire their callbacks.\n\n  # - id: A unique identifier for the waypoint.\n\n  # - offset: The scroll offset at which the waypoint should trigger.\n\n  # - options: A hash containing the various waypoint options.\n  #   See $.fn.waypoint.defaults for more information on those options.\n  class Waypoint\n    constructor: ($element, context, options) ->\n      options = $.extend {}, $.fn[wp].defaults, options\n      if options.offset is 'bottom-in-view'\n        options.offset = ->\n          contextHeight = $[wps] 'viewportHeight'\n          unless $.isWindow context.element\n            contextHeight = context.$element.height()\n          contextHeight - $(this).outerHeight()\n\n      @$element = $element\n      @element = $element[0]\n      @axis = if options.horizontal then 'horizontal' else 'vertical'\n      @callback = options.handler\n      @context = context\n      @enabled = options.enabled\n      @id = 'waypoints' + waypointCounter++\n      @offset = null\n      @options = options\n\n      # Add our new waypoint to its context.\n      context.waypoints[@axis][@id] = this\n\n      # Add it to the global hash.\n      allWaypoints[@axis][@id] = this\n\n      # Add the waypoint's id to the element's waypoint id list.\n      idList = @element[waypointKey] ? []\n      idList.push @id\n      @element[waypointKey] = idList\n    \n    # trigger(array)\n\n    # Calls the waypoint's callback function, passing to it the arguments\n    # supplied in the \"args\" array.\n    trigger: (args) ->\n      return unless @enabled\n      if @callback?\n        @callback.apply @element, args\n      if @options.triggerOnce\n        @destroy()\n\n    # disable()\n\n    # Temporarily disables a waypoint from firing its callback.\n    disable: ->\n      @enabled = false\n\n    # enable()\n\n    # Breathe life back into the waypoint.\n    enable: ->\n      @context.refresh()\n      @enabled = true\n\n    # destroy()\n\n    # Kills the waypoint for good.\n    destroy: ->\n      delete allWaypoints[@axis][@id]\n      delete @context.waypoints[@axis][@id]\n      @context.checkEmpty()\n\n    # Waypoint.getWaypointsByElement(HTMLNode)\n\n    # Returns an array of all Waypoint instances attached to the \"element\"\n    # HTMLNode. Returns an empty array if there are no attached waypoints.\n    @getWaypointsByElement: (element) ->\n      ids = element[waypointKey]\n      return [] unless ids\n      all = $.extend {}, allWaypoints.horizontal, allWaypoints.vertical\n      $.map ids, (id) ->\n        all[id]\n\n  # These methods are available on the $.fn object by using the method\n  # name as the first argument to .waypoint. Ex: $('div').waypoint('destroy')\n  methods =\n\n    # init(function, object)\n\n    # Creates a new waypoint (and if needed, a new context) using the supplied\n    # callback function and options.\n\n    # The \"f\" function and the \"options\" object are both optional, but at least\n    # one must be supplied. So acceptable signatures are:\n\n    # - .waypoint(f)\n    # - .waypoint(options)\n    # - .waypoint(f, options)\n\n    # This \"init\" method should never need to be called explicity by the user.\n    # It is the default method that is delegated to when .waypoint is called\n    # with one of the above signatures.\n\n    # Ex: $('div').waypoint(function(direction) {\n    #   // Do things\n    # }, { offset: '100%' });\n    init: (f, options) ->\n      options ?= {}\n      options.handler ?= f\n\n      @each ->\n        $this = $ this\n        contextElement = options.context ? $.fn[wp].defaults.context\n        unless $.isWindow contextElement\n          contextElement = $this.closest contextElement\n        contextElement = $ contextElement\n        context = contexts[contextElement[0][contextKey]]\n        context = new Context contextElement unless context\n        new Waypoint $this, context, options\n      $[wps] 'refresh'\n      this\n\n    # Disable, enable, and destroy all just delegate to the instance methods\n    # of the waypoints attached to the subject elements.\n    disable: -> methods._invoke.call this, 'disable'\n    enable: -> methods._invoke.call this, 'enable'\n    destroy: -> methods._invoke.call this, 'destroy'\n\n    # .waypoint('prev', string, string|HTMLNode|jQuery)\n\n    # Returns a jQuery object containing previous waypoint elements. This\n    # creates a new entry in the jQuery object stack just like jQuery's prev\n    # function. \"axis\" indicates the axis on which to traverse\n    # ('horizontal' | 'vertical') and \"selector\" indicates which context\n    # element to use. The defaults are 'vertical' and window respectively.\n    prev: (axis, selector) ->\n      methods._traverse.call this, axis, selector, (stack, index, waypoints) ->\n        stack.push waypoints[index-1] if index > 0\n\n    # .waypoint('next', string, string|HTMLNode|jQuery)\n\n    # Returns a jQuery object containing next waypoint elements. This\n    # creates a new entry in the jQuery object stack just like jQuery's next\n    # function. \"axis\" indicates the axis on which to traverse\n    # ('horizontal' | 'vertical') and \"selector\" indicates which context\n    # element to use. The defaults are 'vertical' and window respectively.\n    next: (axis, selector) ->\n      methods._traverse.call this, axis, selector, (stack, index, waypoints) ->\n        stack.push waypoints[index+1] if index < waypoints.length-1\n\n    # Internal: Aggregates waypoints on a given axis of a context, and applies\n    # a \"push\" callback for each element in the subject jQuery object. This\n    # callback builds the element array to push to the jQuery stack.\n    _traverse: (axis = 'vertical', selector = window, push) ->\n      waypoints = jQMethods.aggregate selector\n      stack = []\n      @each ->\n        index = $.inArray this, waypoints[axis]\n        push stack, index, waypoints[axis]\n      @pushStack stack\n\n    # Internal: Finds all waypoints on a given set of \"$elements\" and invokes\n    # \"method\" on each instance.\n    _invoke: (method) ->\n      this.each ->\n        waypoints = Waypoint.getWaypointsByElement this\n        $.each waypoints, (i, waypoint) ->\n          waypoint[method]()\n          true\n      this\n\n  # $.fn.waypoint. Let's just hook this guy up to our methods hash and\n  # add some trivial error reporting for bogus calls.\n  $.fn[wp] = (method, args...) ->\n    if methods[method]\n      methods[method].apply this, args\n    else if $.isFunction(method)\n      methods.init.apply this, arguments\n    else if $.isPlainObject(method)\n      methods.init.apply this, [null, method]\n    else if !method\n      $.error \"jQuery Waypoints needs a callback function or handler option.\"\n    else\n      $.error \"The #{method} method does not exist in jQuery Waypoints.\"\n\n  # The default options object for a waypoint.\n\n  # - context: string|HTMLNode|jQuery - The scrollable element that the\n  #   waypoint acts within. The waypoint will look for the closest ancestor\n  #   element that matches this selector or node.\n\n  # - continuous: Multiple waypoints may be triggered by a single scroll check.\n  #   If you would like a waypoint to only trigger if it is the last waypoint\n  #   in a scroll check, set this to false.\n\n  # - enabled: Should this waypoint start enabled (true) or disabled (false)?\n\n  # - handler: This option is not defined by default, but can be used as an\n  #   alternate way to pass the waypoint callback function, rather than as\n  #   the first argument to .waypoint.\n\n  #   Ex: $('div').waypoint({\n  #     handler: function(direction) { ... }\n  #   });\n\n  # - horizontal: Set this to true if the waypoint is, well, horizontal.\n\n  # - offset: number|string|function - Determines how far from the top (or left\n  #   if the waypoint is horizontal) of the context's viewport to trigger the\n  #   waypoint. The default of 0 means that the waypoint is triggered when the\n  #   top of the waypoint element hits the top of the window/context-element.\n  #   An offset of 50 would mean the waypoint triggers when the top of the\n  #   element is 50 pixels from the top of the window.\n\n  #   A % string is translated into a percentage of the width/height of\n  #   the context.\n\n  #   If a function is passed, that function should return a number. The \"this\"\n  #   keyword within this function will be set to the raw HTMLNode of the\n  #   waypoint element.\n\n  # - triggerOnce: If true, the waypoint will destroy itself after\n  #   first trigger.\n  $.fn[wp].defaults =\n    context: window\n    continuous: true\n    enabled: true\n    horizontal: false\n    offset: 0\n    triggerOnce: false\n    \n  # These methods are available on the $ object by using the method name as\n  # the first argument to .waypoint. Ex: $.waypoints('refresh')\n  jQMethods =\n\n    # $.waypoints('refresh')\n\n    # Forces a refresh on all contexts, recalculating all waypoint offsets.\n    # This is done automatically on waypoint addition and during resize events,\n    # but if a user does something to change the DOM, CSS, or in some way\n    # change the layout of a page and its elements, they might need to call\n    # this method manually.\n    refresh: ->\n      $.each contexts, (i, context) -> context.refresh()\n    \n    # $.waypoints('viewportHeight')\n\n    # A utility method that returns the window height, but takes into account\n    # inconsistencies that come with just using jQuery's .height() on iOS.\n    viewportHeight: ->\n      window.innerHeight ? $w.height()\n\n    # $.waypoints(['aggregate'], [contextSelector])\n\n    # Returns an object containing two HTMLNode arrays, one for each axis:\n\n    # {\n    #   horizontal: [ HTMLNode... ]\n    #   vertical: [ HTMLNode... ]\n    # }\n      \n    # This is the default method used when calling $.waypoints(). If\n    # \"contextSelector\" is not supplied, it returns all waypoints. If\n    # \"contextSelector\" is supplied it only returns waypoints for that context.\n\n    # The array of waypoint elements is returned sorted by calculated offset,\n    # the order in which they would be triggered on the page.\n    aggregate: (contextSelector) ->\n      collection = allWaypoints\n      if contextSelector\n        collection = contexts[$(contextSelector)[0][contextKey]]?.waypoints\n      return [] unless collection\n      waypoints =\n        horizontal: []\n        vertical: []\n      $.each waypoints, (axis, arr) ->\n        $.each collection[axis], (key, waypoint) ->\n          arr.push waypoint\n        arr.sort (a, b) -> a.offset - b.offset\n        waypoints[axis] = $.map arr, (waypoint) -> waypoint.element\n        waypoints[axis] = $.unique waypoints[axis]\n      waypoints\n\n    # $.waypoints('above', [string|HTMLNode|jQuery])\n\n    # Returns all vertical waypoints that lie above the current scroll position\n    # of the context specified by \"contextSelector\". If no \"contextSelector\"\n    # is supplied, it defaults to the window.\n    above: (contextSelector = window) ->\n      jQMethods._filter contextSelector, 'vertical', (context, waypoint) ->\n        waypoint.offset <= context.oldScroll.y\n\n    # $.waypoints('below', [string|HTMLNode|jQuery])\n\n    # Returns all vertical waypoints that lie below the current scroll position\n    # of the context specified by \"contextSelector\". If no \"contextSelector\"\n    # is supplied, it defaults to the window.\n    below: (contextSelector = window) ->\n      jQMethods._filter contextSelector, 'vertical', (context, waypoint) ->\n        waypoint.offset > context.oldScroll.y\n\n    # $.waypoints('left', [string|HTMLNode|jQuery])\n\n    # Returns all horizontal waypoints left of the current scroll position\n    # of the context specified by \"contextSelector\". If no \"contextSelector\"\n    # is supplied, it defaults to the window.\n    left: (contextSelector = window) ->\n      jQMethods._filter contextSelector, 'horizontal', (context, waypoint) ->\n        waypoint.offset <= context.oldScroll.x\n\n    # $.waypoints('right', [string|HTMLNode|jQuery])\n\n    # Returns all horizontal waypoints right of the current scroll position\n    # of the context specified by \"contextSelector\". If no \"contextSelector\"\n    # is supplied, it defaults to the window.\n    right: (contextSelector = window) ->\n      jQMethods._filter contextSelector, 'horizontal', (context, waypoint) ->\n        waypoint.offset > context.oldScroll.x\n\n    # $.waypoints('enable/disable/destroy')\n\n    # These methods delegate to the enable/disable/destroy instance methods \n    # for all waypoints.\n    enable: -> jQMethods._invoke 'enable'\n    disable: -> jQMethods._invoke 'disable'\n    destroy: -> jQMethods._invoke 'destroy'\n\n    # $.waypoints('extendFn', string, function)\n\n    # Extends the $.fn.waypoint method object with a new method, \"f\". This\n    # just lets other modules piggyback on the .waypoint namespace.\n    extendFn: (methodName, f) ->\n      methods[methodName] = f\n\n    # Internal: Invokes \"method\" on all waypoints.\n    _invoke: (method) ->\n      waypoints = $.extend {}, allWaypoints.vertical, allWaypoints.horizontal\n      $.each waypoints, (key, waypoint) ->\n        waypoint[method]()\n        true\n\n    # Internal: Returns an array of all HTMLNodes for each waypoint that passes\n    # the \"test\" function. Only waypoints within the \"selector\" context on the\n    # \"axis\" axis are tested. As with .aggregate, the array is sorted by\n    # calculated offset (trigger order).\n    _filter: (selector, axis, test) ->\n      context = contexts[$(selector)[0][contextKey]]\n      return [] unless context\n      waypoints = []\n      $.each context.waypoints[axis], (i, waypoint) ->\n        waypoints.push waypoint if test context, waypoint\n      waypoints.sort (a, b) -> a.offset - b.offset\n      $.map waypoints, (waypoint) -> waypoint.element\n\n  # Hook up jQMethods to the $.waypoints namespace.\n  $[wps] = (method, args...) ->\n    if jQMethods[method]\n      jQMethods[method].apply null, args\n    else\n      jQMethods.aggregate.call null, method\n\n  # Plugin-wide settings:\n\n  # - resizeThrottle: For performance reasons, the refresh performed during\n  #   resizes is throttled. This value is the rate-limit in milliseconds\n  #   between resize refreshes. For more information on throttling, check out\n  #   Ben Alman’s throttle / debounce plugin.\n  #   http://benalman.com/projects/jquery-throttle-debounce-plugin/\n\n  # - scrollThrottle: For performance reasons, checking for any crossed\n  #   waypoints during a scroll event is throttled. This value is the\n  #   rate-limit in milliseconds between scroll checks. For more information\n  #   on throttling, check out Ben Alman’s throttle / debounce plugin.\n  #   http://benalman.com/projects/jquery-throttle-debounce-plugin/\n\n  $[wps].settings =\n    resizeThrottle: 100\n    scrollThrottle: 30\n\n  # Ensure a refresh on page load. Newly loaded images often shift layout.\n  $w.load -> $[wps] 'refresh'\n"]}