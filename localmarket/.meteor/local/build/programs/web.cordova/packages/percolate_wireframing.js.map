)]}'
{"version":3,"file":"/packages/percolate:wireframing.js","sources":["percolate:wireframing/placeholder.html","percolate:wireframing/placeholder.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,oC;AACA,4E;AACA,kB;AACA,mB;AACA,yB;AACA,yE;AACA,M;AACA,uB;AACA,sD;AACA,K;AACA,sC;AACA,mD;AACA,8D;AACA,yC;AACA,uD;AACA,O;AACA,c;AACA,I;;;;;;;;;;;;;;;;;;;AClBA,yE;AACA,S;AACA,kE;AACA,E;AACA,6D;AACA,6C;AACA,G;;AAEA,c;;AAEA,2B;AACA,iC;AACA,C;;AAEA,6B;AACA,6B;AACA,C;;AAEA,8B;AACA,oB;AACA,yB;AACA,I;AACA,qB;AACA,gD;AACA,oD;;AAEA,+C;AACA,+B;AACA,uD;AACA,mC;AACA,6B;AACA,G;AACA,E;;AAEA,iH;AACA,oC;;AAEA,kB;AACA,iG;;AAEA,sB;AACA,+G;;AAEA,kB;AACA,C;;AAEA,4B;AACA,oC;AACA,oC;AACA,oC;;AAEA,8E;AACA,qB;AACA,qB;AACA,mB;AACA,I;;AAEA,oB;AACA,gB;AACA,G;;AAEA,e;AACA,C","sourcesContent":["\nTemplate.__checkName(\"placeholder\");\nTemplate[\"placeholder\"] = new Template(\"Template.placeholder\", (function() {\n  var view = this;\n  return HTML.DIV({\n    \"class\": function() {\n      return [ \"placeholder \", Spacebars.mustache(view.lookup(\"name\")) ];\n    },\n    style: function() {\n      return Spacebars.mustache(view.lookup(\"style\"));\n    }\n  }, \"\\n    \", Blaze.View(function() {\n    return Spacebars.mustache(view.lookup(\"name\"));\n  }), \"\\n    \", Blaze._InOuterTemplateScope(view, function() {\n    return Spacebars.include(function() {\n      return Spacebars.call(view.templateContentBlock);\n    });\n  }), \"\\n  \");\n}));\n","/* A simple template for rendering placeholders for design implementation\n * Usage:\n *   {{> placeholder 'foobar'}} or {{> placeholder name='foobar'}}\n *\n * To give the placeholder a min-height of UNIT * height, do:\n *   {{> placeholder name='foobar' height=3}}\n */\n\nvar UNIT = 20;\n\nfunction getName(context) {\n  return context.name || context;\n}\n\nfunction getHeight(context) {\n  return context.height || 1;\n}\n\nTemplate.placeholder.helpers({\n  name: function() {\n    return getName(this);\n  },\n  style: function() {\n    var bgColor = stringToColour(getName(this));\n    var color = isDark(bgColor) ? 'white' : 'black';\n\n    return 'background-color: ' + bgColor + ';'\n      + 'color: ' + color + ';'\n      + 'min-height: ' + getHeight(this) * UNIT + 'px;'\n      + 'min-width:' + UNIT + 'px;'\n      + 'text-align: center';\n  }\n})\n\n// from: http://stackoverflow.com/questions/3426404/create-a-hexadecimal-colour-based-on-a-string-with-javascript\nvar stringToColour = function(str) {\n\n    // str to hash\n    for (var i = 0, hash = 0; i < str.length; hash = str.charCodeAt(i++) + ((hash << 5) - hash));\n\n    // int/hash to hex\n    for (var i = 0, colour = \"#\"; i < 3; colour += (\"00\" + ((hash >> i++ * 8) & 0xFF).toString(16)).slice(-2));\n\n    return colour;\n}\n\nvar isDark = function(rgb) {\n  var r = parseInt(rgb.slice(1, 3));\n  var g = parseInt(rgb.slice(3, 5));\n  var b = parseInt(rgb.slice(3, 7));\n\n  var hsp = Math.sqrt( // HSP equation from http://alienryderflex.com/hsp.html\n    0.299 * (r * r) +\n    0.587 * (g * g) +\n    0.114 * (b * b)\n  );\n\n  if (hsp > 127.5) {\n    return true;\n  }\n\n  return false;\n}\n"]}