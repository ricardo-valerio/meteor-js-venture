)]}'
{"version":3,"sources":["oauth/oauth_client.js","oauth/oauth_browser.js","oauth/oauth_common.js","oauth/deprecated.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,iE;AACA,4E;AACA,sC;AACA,2B;;AAEA,W;;AAEA,wD;AACA,uE;AACA,E;;AAEA,qE;AACA,E;AACA,E;AACA,yD;;AAEA,yB;AACA,mB;AACA,G;;AAEA,mF;;AAEA,sD;AACA,0D;;AAEA,qE;AACA,kE;AACA,iB;AACA,kC;AACA,S;AACA,0D;AACA,qD;AACA,iB;AACA,2B;AACA,K;AACA,G;;AAEA,oB;AACA,E;;AAEA,4D;AACA,e;AACA,2B;AACA,qC;AACA,+B;AACA,I;;AAEA,gC;AACA,6C;;AAEA,iE;AACA,4C;AACA,2E;AACA,8C;AACA,E;;;AAGA,qE;AACA,sE;AACA,gC;AACA,E;AACA,sE;AACA,0C;AACA,kF;AACA,K;AACA,oD;AACA,E;;AAEA,oE;AACA,qE;AACA,wC;AACA,E;AACA,iE;AACA,mE;AACA,kB;AACA,E;AACA,0C;AACA,qD;;AAEA,yD;AACA,gB;;AAEA,sD;AACA,wD;AACA,uB;AACA,O;AACA,mD;AACA,mC;AACA,e;AACA,0D;AACA,G;AACA,U;AACA,6C;AACA,qC;AACA,sC;AACA,I;AACA,E;;AAEA,mE;AACA,sE;AACA,mE;AACA,6B;AACA,E;AACA,W;AACA,4C;AACA,qC;AACA,4E;AACA,8E;AACA,kE;AACA,wD;AACA,E;AACA,wC;AACA,6B;AACA,6C;AACA,uC;AACA,oB;AACA,uB;AACA,uF;AACA,4B;AACA,iD;AACA,6E;AACA,uC;AACA,U;AACA,2C;AACA,G;AACA,E;;AAEA,0B;AACA,2E;AACA,6E;AACA,kB;AACA,Q;AACA,4C;AACA,c;AACA,I;AACA,E;;AAEA,qE;AACA,oB;AACA,oE;AACA,iC;AACA,wB;AACA,mD;AACA,gD;AACA,U;AACA,mE;AACA,G;AACA,E;;AAEA,qE;AACA,0E;AACA,8D;AACA,wE;AACA,wD;AACA,gC;AACA,kD;AACA,iB;AACA,sE;AACA,2D;AACA,qD;AACA,U;AACA,8C;AACA,G;AACA,gB;AACA,E;;;;;;;;;;;;;;;;;;;ACpKA,+C;;AAEA,2E;AACA,U;AACA,E;AACA,kC;AACA,+E;AACA,e;AACA,uE;AACA,yD;AACA,wD;AACA,gE;AACA,gC;AACA,Q;AACA,4C;AACA,4C;AACA,I;;AAEA,+C;AACA,S;AACA,iF;AACA,sC;AACA,gE;AACA,mE;AACA,iB;AACA,mE;AACA,oE;AACA,qE;AACA,wB;AACA,a;AACA,K;;AAEA,sB;AACA,oC;AACA,iB;AACA,K;AACA,U;AACA,E;;AAEA,sD;AACA,qD;AACA,6C;AACA,qD;AACA,4C;AACA,2D;AACA,wD;AACA,6D;AACA,iE;AACA,wB;;AAEA,oE;AACA,kE;AACA,gD;AACA,iD;AACA,0D;AACA,uE;;AAEA,sD;AACA,sB;AACA,sB;AACA,mB;AACA,E;;;;;;;;;;;;;;;;;;AC7DA,6D;;AAEA,iF;AACA,0B;AACA,iE;AACA,sE;AACA,oE;AACA,0C;AACA,uE;AACA,gD;AACA,iD;;AAEA,oE;AACA,mE;AACA,wE;AACA,wB;AACA,wB;AACA,e;AACA,6B;AACA,+B;AACA,+B;AACA,0B;AACA,0B;AACA,4B;AACA,yB;AACA,K;AACA,G;;AAEA,qC;AACA,gD;AACA,6C;;AAEA,oB;AACA,4D;AACA,yC;AACA,wE;AACA,iE;AACA,yD;AACA,mC;AACA,6C;AACA,mD;AACA,4C;AACA,kC;AACA,O;AACA,0C;AACA,K;;AAEA,2D;AACA,sE;AACA,iD;AACA,sB;AACA,O;AACA,G;;AAEA,2B;AACA,oE;AACA,U;AACA,Y;AACA,E;;;;;;;;;;;;;;;;;;;AC1DA,wB;;AAEA,c","file":"/packages/oauth.js","sourcesContent":["// credentialToken -> credentialSecret. You must provide both the\n// credentialToken and the credentialSecret to retrieve an access token from\n// the _pendingCredentials collection.\nvar credentialSecrets = {};\n\nOAuth = {};\n\nOAuth.showPopup = function (url, callback, dimensions) {\n  throw new Error(\"OAuth.showPopup must be implemented on this arch.\");\n};\n\n// Determine the login style (popup or redirect) for this login flow.\n//\n//\nOAuth._loginStyle = function (service, config, options) {\n\n  if (Meteor.isCordova) {\n    return \"popup\";\n  }\n\n  var loginStyle = (options && options.loginStyle) || config.loginStyle || 'popup';\n\n  if (! _.contains([\"popup\", \"redirect\"], loginStyle))\n    throw new Error(\"Invalid login style: \" + loginStyle);\n\n  // If we don't have session storage (for example, Safari in private\n  // mode), the redirect login flow won't work, so fallback to the\n  // popup style.\n  if (loginStyle === 'redirect') {\n    try {\n      sessionStorage.setItem('Meteor.oauth.test', 'test');\n      sessionStorage.removeItem('Meteor.oauth.test');\n    } catch (e) {\n      loginStyle = 'popup';\n    }\n  }\n\n  return loginStyle;\n};\n\nOAuth._stateParam = function (loginStyle, credentialToken) {\n  var state = {\n    loginStyle: loginStyle,\n    credentialToken: credentialToken,\n    isCordova: Meteor.isCordova\n  };\n\n  if (loginStyle === 'redirect')\n    state.redirectUrl = '' + window.location;\n\n  // Encode base64 as not all login services URI-encode the state\n  // parameter when they pass it back to us.\n  // Use the 'base64' package here because 'btoa' isn't supported in IE8/9.\n  return Base64.encode(JSON.stringify(state));\n};\n\n\n// At the beginning of the redirect login flow, before we redirect to\n// the login service, save the credential token for this login attempt\n// in the reload migration data.\n//\nOAuth.saveDataForRedirect = function (loginService, credentialToken) {\n  Reload._onMigrate('oauth', function () {\n    return [true, {loginService: loginService, credentialToken: credentialToken}];\n  });\n  Reload._migrate(null, {immediateMigration: true});\n};\n\n// At the end of the redirect login flow, when we've redirected back\n// to the application, retrieve the credentialToken and (if the login\n// was successful) the credentialSecret.\n//\n// Called at application startup.  Returns null if this is normal\n// application startup and we weren't just redirected at the end of\n// the login flow.\n//\nOAuth.getDataAfterRedirect = function () {\n  var migrationData = Reload._migrationData('oauth');\n\n  if (! (migrationData && migrationData.credentialToken))\n    return null;\n\n  var credentialToken = migrationData.credentialToken;\n  var key = OAuth._storageTokenPrefix + credentialToken;\n  var credentialSecret;\n  try {\n    credentialSecret = sessionStorage.getItem(key);\n    sessionStorage.removeItem(key);\n  } catch (e) {\n    Meteor._debug('error retrieving credentialSecret', e);\n  }\n  return {\n    loginService: migrationData.loginService,\n    credentialToken: credentialToken,\n    credentialSecret: credentialSecret\n  };\n};\n\n// Launch an OAuth login flow.  For the popup login style, show the\n// popup.  For the redirect login style, save the credential token for\n// this login attempt in the reload migration data, and redirect to\n// the service for the login.\n//\n// options:\n//  loginService: \"facebook\", \"google\", etc.\n//  loginStyle: \"popup\" or \"redirect\"\n//  loginUrl: The URL at the login service provider to start the OAuth flow.\n//  credentialRequestCompleteCallback: for the popup flow, call when the popup\n//    is closed and we have the credential from the login service.\n//  credentialToken: our identifier for this login flow.\n//\nOAuth.launchLogin = function (options) {\n  if (! options.loginService)\n    throw new Error('loginService required');\n  if (options.loginStyle === 'popup') {\n    OAuth.showPopup(\n      options.loginUrl,\n      _.bind(options.credentialRequestCompleteCallback, null, options.credentialToken),\n      options.popupOptions);\n  } else if (options.loginStyle === 'redirect') {\n    OAuth.saveDataForRedirect(options.loginService, options.credentialToken);\n    window.location = options.loginUrl;\n  } else {\n    throw new Error('invalid login style');\n  }\n};\n\n// XXX COMPAT WITH 0.7.0.1\n// Private interface but probably used by many oauth clients in atmosphere.\nOAuth.initiateLogin = function (credentialToken, url, callback, dimensions) {\n  OAuth.showPopup(\n    url,\n    _.bind(callback, null, credentialToken),\n    dimensions\n  );\n};\n\n// Called by the popup when the OAuth flow is completed, right before\n// the popup closes.\nOAuth._handleCredentialSecret = function (credentialToken, secret) {\n  check(credentialToken, String);\n  check(secret, String);\n  if (! _.has(credentialSecrets,credentialToken)) {\n    credentialSecrets[credentialToken] = secret;\n  } else {\n    throw new Error(\"Duplicate credential token from OAuth login\");\n  }\n};\n\n// Used by accounts-oauth, which needs both a credentialToken and the\n// corresponding to credential secret to call the `login` method over DDP.\nOAuth._retrieveCredentialSecret = function (credentialToken) {\n  // First check the secrets collected by OAuth._handleCredentialSecret,\n  // then check localStorage. This matches what we do in\n  // end_of_login_response.html.\n  var secret = credentialSecrets[credentialToken];\n  if (! secret) {\n    var localStorageKey = OAuth._storageTokenPrefix + credentialToken;\n    secret = Meteor._localStorage.getItem(localStorageKey);\n    Meteor._localStorage.removeItem(localStorageKey);\n  } else {\n    delete credentialSecrets[credentialToken];\n  }\n  return secret;\n};\n","// Browser specific code for the OAuth package.\n\n// Open a popup window, centered on the screen, and call a callback when it\n// closes.\n//\n// @param url {String} url to show\n// @param callback {Function} Callback function to call on completion. Takes no\n//   arguments.\n// @param dimensions {optional Object(width, height)} The dimensions of\n//   the popup. If not passed defaults to something sane.\nOAuth.showPopup = function (url, callback, dimensions) {\n  // default dimensions that worked well for facebook and google\n  var popup = openCenteredPopup(\n    url,\n    (dimensions && dimensions.width) || 650,\n    (dimensions && dimensions.height) || 331\n  );\n\n  var checkPopupOpen = setInterval(function() {\n    try {\n      // Fix for #328 - added a second test criteria (popup.closed === undefined)\n      // to humour this Android quirk:\n      // http://code.google.com/p/android/issues/detail?id=21061\n      var popupClosed = popup.closed || popup.closed === undefined;\n    } catch (e) {\n      // For some unknown reason, IE9 (and others?) sometimes (when\n      // the popup closes too quickly?) throws \"SCRIPT16386: No such\n      // interface supported\" when trying to read 'popup.closed'. Try\n      // again in 100ms.\n      return;\n    }\n\n    if (popupClosed) {\n      clearInterval(checkPopupOpen);\n      callback();\n    }\n  }, 100);\n};\n\nvar openCenteredPopup = function(url, width, height) {\n  var screenX = typeof window.screenX !== 'undefined'\n        ? window.screenX : window.screenLeft;\n  var screenY = typeof window.screenY !== 'undefined'\n        ? window.screenY : window.screenTop;\n  var outerWidth = typeof window.outerWidth !== 'undefined'\n        ? window.outerWidth : document.body.clientWidth;\n  var outerHeight = typeof window.outerHeight !== 'undefined'\n        ? window.outerHeight : (document.body.clientHeight - 22);\n  // XXX what is the 22?\n\n  // Use `outerWidth - width` and `outerHeight - height` for help in\n  // positioning the popup centered relative to the current window\n  var left = screenX + (outerWidth - width) / 2;\n  var top = screenY + (outerHeight - height) / 2;\n  var features = ('width=' + width + ',height=' + height +\n                  ',left=' + left + ',top=' + top + ',scrollbars=yes');\n\n  var newwindow = window.open(url, 'Login', features);\n  if (newwindow.focus)\n    newwindow.focus();\n  return newwindow;\n};","OAuth._storageTokenPrefix = \"Meteor.oauth.credentialSecret-\";\n\nOAuth._redirectUri = function (serviceName, config, params, absoluteUrlOptions) {\n  // XXX COMPAT WITH 0.9.0\n  // The redirect URI used to have a \"?close\" query argument.  We\n  // detect whether we need to be backwards compatible by checking for\n  // the absence of the `loginStyle` field, which wasn't used in the\n  // code which had the \"?close\" argument.\n  // This logic is duplicated in the tool so that the tool can do OAuth\n  // flow with <= 0.9.0 servers (tools/auth.js).\n  var query = config.loginStyle ? null : \"close\";\n\n  // Clone because we're going to mutate 'params'. The 'cordova' and\n  // 'android' parameters are only used for picking the host of the\n  // redirect URL, and not actually included in the redirect URL itself.\n  var isCordova = false;\n  var isAndroid = false;\n  if (params) {\n    params = _.clone(params);\n    isCordova = params.cordova;\n    isAndroid = params.android;\n    delete params.cordova;\n    delete params.android;\n    if (_.isEmpty(params)) {\n      params = undefined;\n    }\n  }\n\n  if (Meteor.isServer && isCordova) {\n    var rootUrl = process.env.MOBILE_ROOT_URL ||\n          __meteor_runtime_config__.ROOT_URL;\n\n    if (isAndroid) {\n      // Match the replace that we do in cordova boilerplate\n      // (boilerplate-generator package).\n      // XXX Maybe we should put this in a separate package or something\n      // that is used here and by boilerplate-generator? Or maybe\n      // `Meteor.absoluteUrl` should know how to do this?\n      var url = Npm.require(\"url\");\n      var parsedRootUrl = url.parse(rootUrl);\n      if (parsedRootUrl.hostname === \"localhost\") {\n        parsedRootUrl.hostname = \"10.0.2.2\";\n        delete parsedRootUrl.host;\n      }\n      rootUrl = url.format(parsedRootUrl);\n    }\n\n    absoluteUrlOptions = _.extend({}, absoluteUrlOptions, {\n      // For Cordova clients, redirect to the special Cordova root url\n      // (likely a local IP in development mode).\n      rootUrl: rootUrl\n    });\n  }\n\n  return URL._constructUrl(\n    Meteor.absoluteUrl('_oauth/' + serviceName, absoluteUrlOptions),\n    query,\n    params);\n};\n","// XXX COMPAT WITH 0.8.0\n\nOauth = OAuth;\n"]}